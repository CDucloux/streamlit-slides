---
title: "üíª Streamlit"
subtitle: "*Le framework qui cartonne*"
author: "`Buk`, `Guig's`, le `H` et le `Coc's`"
date: today
date-format: DD/MM/YYYY
link-external-icon: true
title-slide-attributes:
    data-background-image: "imgs/streamlit_mark.png"
    data-background-size: 50%
    data-background-opacity: "0.5"
    data-notes: "Bonjour √† tous, on va vous pr√©senter Streamlit"
format: 
    revealjs:
        theme: [simple, custom.scss]
        background-transition: fade
        incremental: true
        transition: fade
        navigation-mode: linear
        footer: "Pr√©sentation de [*Streamlit*](https://streamlit.io/)"
        logo: https://corentinducloux.fr/dossier_img/mecen_transparent.png
        include-in-header: 
            - text: | 
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
---

## Pr√©sentation

> Un framework python r√©cent, lanc√© en 2019.

Et avant **Streamlit**, qu'est ce qu'il y avait ?

- **Flask** $\Rightarrow$ Prise en main tr√®s complexe, plus adapt√©e pour les *Software Engineers*.

- **Plotly Dash** $\Rightarrow$ Prise en main plus simple que **Flask**, concept assez similaire √† **Shiny** avec s√©paration des composants `UI` et `server`.

:::{.notes}
*Corentin*

- Flask $\Rightarrow$ Super Framework pour faire une appli web scalable mais si vous venez d'un background Data c'est vraiment tr√®s tr√®s gal√®re, il faut savoir ce qu'on fait.

- Plotly Dash $\Rightarrow$ Configuration des inputs, outputs, callbacks.

:::


## Pourquoi Streamlit ?

**Objectif** : Simplifier au maximum le d√©veloppement d'applications *Data*.

:::: {.fragment .strike fragment-index=6}

::: {.fragment fragment-index=1}
User Interface ?
:::

::: {.fragment fragment-index=2}
Inputs ?
:::

::: {.fragment fragment-index=3}
Outputs ?
:::

::: {.fragment fragment-index=4}
Interactions ?
:::

::: {.fragment fragment-index=5}
Callbacks ?
:::

::::

> Et pourquoi pas juste un script <i class="fa-brands fa-python"></i> ?


:::{.notes}
*Corentin*

**A dire apr√®s l'objectif : **

A l'√©poque un Data Scientist il faisait son petit Boosting en utilisant sklearn, il faisait une cross-validation, il regardait ses m√©triques et puis si c'√©tait bien il passait √† un autre projet.

Et puis...c'est tout.

En bref il restait souvent dans son notebook, le mod√®le √©tait assez peu exploitable, et surtout, il √©tait interpr√©table uniquement par les √©quipes Data qui l'avaient fait. Et les Data Scientists ils avaient pas particuli√®rement envie de s'emb√™ter √† apprendre Dash ou m√™me Flask. **Niveau communication des r√©sultats on a vu mieux.**

Et c'est l√† que *Streamlit* arrive avec une id√©e toute simple : au lieu de s√©parer tous les composants logiciels de l'interface utilisateur, on fait juste un script.

:::

## Installation

::: {.callout-tip}

## On passe √† l'installation ?

::: {.nonincremental}
1. Lancement d'un terminal : <i class="fa-solid fa-terminal"></i>
2. Et ensuite on installe via `pip` avec la commande
:::

```powershell
python -m pip install streamlit
```

:::

:::{.notes}
*Aybuk√©*

Est-ce que tt le monde a r√©ussi √† installer du coup ?
:::

## Prise en main

$\Rightarrow$ Lan√ßons la d√©mo pour voir de quoi **Streamlit** est capable.

::: {.callout-tip}

## üëã Hello Streamlit

```python
python -m streamlit hello
```
:::

:::{.notes}
*Aybuk√©*

Vous pouvez regarder en d√©tail la d√©mo mais on va pas vraiment se concentrer dessus √©tant donn√© qu'on va construire une petite app nous-m√™me, on trouve que c'est quand m√™me plus int√©ressant.
:::

## Un premier jet ! {.smaller}

```{.python filename="app.py"}
import streamlit as st

st.set_page_config(page_icon="üêç", page_title="PyApp")
st.title("üòé Ma premi√®re app super styl√©e")

st.markdown("Du *markdown* dans l'app ? **Rien de plus simple !**")
st.markdown("- Lien vers [`streamlit`](https://streamlit.io/)")
st.markdown(
    """
    > Des couleurs ? :orange[orange], :red[rouge], :green[vert]
    """
)

st.code(
    """
    [[i for i in range(5)] for j in range(2)] 
    # Du code non-ex√©cutable
    """,
    language="python"
)

st.divider()
```

> üöÄ et pour lancer l'appli :

```powershell
python -m streamlit run app.py
```

:::{.notes}
*Aybuk√©*
:::

## Ce qu'on a vu jusqu'ici

- `st.set_page_config()` pour configurer le favicon et le titre de l'onglet dans le navigateur

- `st.title()` pour donner un titre √† notre app

- `st.markdown()` pour ajouter du texte avec diff√©rents types de formattage : italique, gras, ajout de liens, etc.

- `st.code()` pour inclure du code non-ex√©cutable provenant de diff√©rents langages : `python`, `SQL`, `CSS`, etc.

- `st.divider()` pour tracer une ligne horizontale

:::{.notes}
*Aybuk√©*
:::

## Int√©gration de LaTeX

Identit√© D'*Euler*

$$
e^{i \pi} + 1 = 0
$$

Ajoutons ces quelques lignes de code.

```python
st.header("Ajoutons du LaTeX")
st.subheader("Identit√© d'*Euler*", divider="blue")
st.latex("e^{i \pi} + 1 = 0")
st.caption(
    """
    L'identit√© d'*Euler* est souvent cit√©e comme
    un exemple de beaut√© math√©matique.
    """
)
```

:::{.notes}
*Corentin*

Ca c'est quelque chose qui va certainement plaire √† madame Scholler.
:::

## Pr√©sentation de widgets

> Testons quelques widgets !

::: {.nonincremental}
- `st.selectbox()`
- `st.button()`
:::

```python
fruit = st.selectbox(
    "Fruit",
    ("üçì Fraise", "üçä Orange", "ü•≠ Mangue", "üçå Banane", "üçè Pomme"),
    index = None,
    placeholder = "S√©lectionner un fruit"
)

bouton = st.button("Voir les d√©tails du fruit s√©lectionn√©")

if bouton:
    st.write(f"T'as la dalle ! Tu veux manger une **{fruit}**")
```

:::{.notes}
*Guillaume*

Notez qu'une fois que vous changez l'input de la `selectbox` dans l'application, l'ensemble du script est r√©-√©x√©cut√©, et donc, le bouton est re-cach√© par d√©faut. 

Ce **rerun total** qui est la signature de streamlit peut faciliter le d√©veloppement de certaines applis mais peut parfois √™tre assez contraignant.

:::

## Options de layout

- `st.columns()` $\Rightarrow$ Colonnes
- `st.container()` $\Rightarrow$ Conteneur
- `st.expander()` $\Rightarrow$ Expandeur
- `st.tabs()` $\Rightarrow$ Tabs
- `st.sidebar()` $\Rightarrow$ Sidebar
- `st.popover()` $\Rightarrow$ Popover

:::{.notes}
*Hassan*

De nombreuses options de layout sont disponibles pour modifier l'application.

On peut ajouter des colonnes, cr√©er des boites flexbox avec les containers, des tabs, une sidebar, etc.

:::

## Colonnes

`colonne_1, colonne_2 = st.columns(2)`

**Explication visuelle par Donald J. Trump**

![](imgs/meme_columns.jpg){fig-align="center" width="35%"}

:::{.notes}
*Hassan*

La je vais d'abord vous pr√©senter la cr√©ation de colonnes avec le futur pr√©sident des Etats-Unis.

Il y a plusieurs moyens de g√©rer la taille des colonnes, par d√©faut si on ne met qu'un chiffre qui indique le nombre de colonnes √ßa va diviser la page en 2,3,4, etc.

Mais on peut aussi passer une liste avec des floats du type `[0.1, 0.4, 0.4, 0.1]`
:::

## Sidebar

> On va changer notre interface utilisateur pour ajouter une **Sidebar** et regrouper nos widgets.

```python
with st.sidebar:
    prenom = st.text_input("ü§† Ecris ton pr√©nom *cow-boy* !")
    reussite = st.checkbox("Tu penses avoir ton ann√©e ?")
    note_pf = st.number_input(
        "Ta note en Concurrence et Innovation",
        min_value=0,
        max_value=5,
        step=1
    )
    epanouissement = st.select_slider(
        "Ton √©panouissement en master",
        range(11)
    )
```

:::{.notes}
*Aybuk√©*

La notation with permet de dire avec quel objet du layout on travaille. La, on voit qu'on travaille avec notre sidebar et qu'on lui ajoute des inputs.

:::

## Tabs

> On va ajouter quelques onglets **(Tabs)** √† notre application pour diversifier l'interface.

```python
tab_1, tab_2, tab_3 = st.tabs(
    ["üîé Infos sur l'ann√©e", "üìÑ DataFrame", "üìä Graphiques"]
)

if prenom:
    with tab_1:
        if reussite:
            st.balloons()
            st.write(f"F√©licitations pour ton ann√©e *{prenom}* ! üéà")
        else:
            st.snow()
            st.write(
                f"**Aie Aie Aie**... ü•∂ va falloir taffer *{prenom}*"
            )
```

:::{.notes}
*Guillaume*

On va en plus vous faire crouler sous les ballons et la neige maintenant.
:::

## Des messages de statut {.smaller}

- ‚ÑπÔ∏è `st.info()`
- ‚ùå `st.error()`  
- ‚ö†Ô∏è `st.warning()`
- ‚úÖ `st.success()`

```python
with st.sidebar:
    with st.expander("On regarde quelques messages ?"):
        st.info(
            f"Ton √©panouissement en master : {epanouissement}/10",
            icon="üë®‚Äçüè´"
        )
        st.error(
            f"Ta note en Concurrence et Innovation : {note_pf}",
            icon="üëÄ"
        )
        st.warning("Ceci est un avertissement g√©n√©rique", icon="‚ö†")
        st.success("Message de r√©ussite.", icon="‚úÖ")
```

:::{.notes}
*Hassan*

Sur Streamlit, il existe aussi des conteneurs color√©s sp√©ciaux qui sont adapt√©s pour l'affichage d'erreurs, d'infos, d'avertissements. On va les rergarder un petit peu ensemble.
:::

## Et avec des vraies donn√©es ? (I)

> On a vu tout un tas d'√©l√©ments d'`UI`, mais on a pas vraiment interragi avec des donn√©es dignes de ce nom.

![](imgs/meme_polars.jpg){fig-align="center" width="75%"}

$\Rightarrow$ **Morale de l'histoire** : Installe `polars`

:::{.notes}
*Guillaume*

Quand on pense manipulation de donn√©es en python, on pense `pandas`, mais il est temps de passer √† la vitesse sup√©rieure et d'avoir un truc vraiment rapide.
:::

## Et avec des vraies donn√©es ? (II)

> Exemple avec des donn√©es de cas de *COVID-19* aux **Etats-Unis** entre 2020 et 2022 : + 2.5 millions de lignes !

```python
import polars as pl

df_covid = pl.read_csv(
    "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
)
```

::: {.callout-warning}

## Probl√®mes

- L'import met trois ans
- En plus, chaque action dans l'appli relance l'import...
:::

:::{.notes}
*Guillaume*
:::

## On est pas rendus...

![](imgs/meme_skeleton.jpeg){fig-align="center" width="35%"}

:::{.notes}
*Guillaume*
:::

## Solution (I)

![](imgs/cache_decorator.png){fig-align="center" width="75%"}

**Deux d√©corateurs tr√®s utiles** :

`@st.cache_data` et `@st.cache_resource`

::: {.notes}
*Corentin*

Pour le premier d√©corateur, imaginez que vous ayez un dataframe de 2,5 millions lignes, √ßa va devenir assez encombrant que chaque interaction relance enti√®rement l'appli, et donc l'import des donn√©es peut se faire en une fois, et ensuite les donn√©es vont rester dans le cache du navigateur.
:::

## Solution (II)

```python
@st.cache_data
def import_covid_usa(link: str) -> pl.DataFrame:
    """Fonction d'import des donn√©es optimis√©e."""
    return pl.read_csv(link)
```

üí° Et maintenant, observons la diff√©rence !

```python
df_covid = import_covid_usa(
    "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
)
```

::: {.callout-note}

On attend une seule fois pour l'import des donn√©es, ce qui est beaucoup plus satisfaisant pour l'utilisateur.

- **Solution la plus optimale ici** : base de donn√©es

:::

:::{.notes}
*Corentin*
:::

## Affichage d'un tableau

> On a maintenant envie d'afficher nos donn√©es sous forme de tableau.

```python
with tab_2:
    st.dataframe(
        df_covid,
        hide_index=True,
        use_container_width=True,
        column_config={
            "date": st.column_config.DateColumn("üìÖ Date", format="DD/MM/YYYY")
        },
    )
```

$\Rightarrow$ Grande flexibilit√© dans l'affichage.

:::{.notes}
*Hassan*

L'option hide_index permet de cacher la colonne d'indice qui est associ√©e au dataframe.

La seconde option permet de forcer le tableau √† prendre la taille compl√®te du conteneur. La derni√®re option est probablement la plus int√©ressante parce qu'elle permet de passer un sch√©ma de configuration de colonnes pour les personnaliser.
:::

## üìä Et pour les graphiques ? {.smaller}

> On va chercher √† visualiser le nombre de morts par √©tat √† une certaine date *(un peu macabre üò∑)*.

```python
with tab_3:
    st.subheader("Nombre de personnes mortes de COVID-19 *(No√´l 2020)*")

    deaths_by_state_christmas = (
        df_covid.filter(pl.col("date") == "2020-12-25")
        .group_by("state")
        .agg(pl.col("deaths").sum())
    )

    st.bar_chart(deaths_by_state_christmas, x="state", y="deaths")
```

**De nombreuses options de visualisation √† la vol√©e :** 

- `st.line_chart()`
- `st.scatter_chart()`
- `st.map()`
- *etc.*

:::{.notes}
*Aybuk√©*

Pour plus de contr√¥le sur les visualisations on peut utiliser plotly, altair ou matplotlib avec d'autres commandes.
:::


## DeltaGenerator

::: {.callout-tip}

## Mais comment tout √ßa marche ?

Au coeur de tous ces composants permettant de cr√©er l'interface utilisateur, il y a une classe : le `DeltaGenerator`.

- Syst√®me bas√© sur <i class="fa-brands fa-google"></i> *protobuf*, cr√©e par **GOOGLE**
:::

::: {.notes}
*Corentin*

Et comme √©videmment les devs de chez Streamlit ils ont pas r√©invent√© la roue ils ont utilis√© un syst√®me de s√©rialisation et d√©s√©rialisation de donn√©es qui a √©t√© cr√©e √† la base par **Google**.

Les messages Delta protobuf dans Streamlit en gros c'est donc des messages qui d√©crivent les modifications √† apporter √† l'interface utilisateur de l'application. Ces messages contiennent des instructions sur la fa√ßon de mettre √† jour ou de modifier les √©l√©ments.

Par exemple les messages d'alerte, la sidebar, ou m√™me les tabs, ce sont tous des composants DeltaGenerator qui sont des conteneurs, on peut le voir si on s'amuse √† utiliser F12 pour inspecter l'appli.

:::

## Pour aller + loin

**Secrets management**

`st.secrets`

::: {.notes}
*Hassan*
:::

## Exemples d'appli compl√®tes

- üç∑ Projet de Machine Learning du `Coc's` & du `Guig's` : [Wine Scraping](https://wine-scraping.streamlit.app/)

<hr>

**API Reference** : <https://docs.streamlit.io/library/api-reference>

::: {.notes}
*Guillaume*
:::

## FIN

![](imgs/meme_end.jpg){fig-align="center" width="75%"}


:::{.notes}
*Hassan*

Streamlit devient de plus en plus omnipr√©sent dans le domaine de la data et vous aurez peut-√™tre √† l'utiliser, et en tout cas nous on vous le conseille fortement, et surtout on esp√®re que √ßa vous a plu et que √ßa vous sera utile.

:::

## (Un dernier meme pour la route)

![](imgs/meme_cc.jpg){fig-align="center" width="40%"}

